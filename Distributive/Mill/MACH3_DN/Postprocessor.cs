namespace SprutTechnology.SCPostprocessor
{

    public partial class NCFile: TTextNCFile
    {
        public string ProgName;
        // Declare variables specific to a particular file here, as shown below
        // int FileNumber;
    }

    

    public partial class Postprocessor: TPostprocessor
    {
        #region Common variables definition
        // Declare here global variables that apply to the entire postprocessor.

        ///<summary>Current nc-file</summary>
        NCFile nc;

        #endregion

        double MaxReal = 99999.999;
        int XT_ = 0;
        int YT_ = 0;
        int ZT_ = 0;
        //! Constsnt cycles variables
        int CycleOn = 0;          //! 0 - cycle Off, 1 - cycle On
        int KodCycle = 0;         //! constant cycle code
        int Za = 0;               //! work depth
        int Zf = 0;               //! safe level
        int ZP_ = 0;              // ! reverse move level
        int Zl = 0;               //! depth of one drilling step
        int Zi = 0;               //! transitional value
        int Dwell = 0;            //! pause in constsnt cycles
        int Fr = 0;               //! work FEED_ 
        int Pause = 0;
        //! Set machene functions by default
        
       
        int Firstap = 1;
        int Fedmod = 10;
        int Isfirstpass = 1;
        int SubIDShift = 0;//! Numbers of subroutines starts from it



        const string SPPName = "MACH3_DN";
  
         public void OutToolList()
        {
            var diametr = CLDProject.Operations[0].Tool.Command.CLD[5];
            for(int i = 0; i < CLDProject.Operations.Count;i++)
            {
                var curtool =  CLDProject.Operations[i];
                if(curtool.Enabled)
                {
                    diametr = curtool.Tool.Command.CLD[5];
                }
                nc.Output($"(Tool) ({curtool.Tool.Number}) (Diametr) ({diametr}.) ({curtool.Tool.Caption}) (Operation) ({curtool.Comment}))");
                
            }
        }
        public void Initialise()
        { 
            nc.GInterp.v = MaxReal;               //! initilalise G0 rapid
            nc.ZCycle.v = MaxReal;                //! initalise cycle depth
            nc.ZClear.v = MaxReal;                //! initialise cycle rapid
            nc.Cyc_retract.v = MaxReal;           //! initialise G98 retract
            nc.Q.v = MaxReal;                     //! initialise peck amount
            nc.Feed_.v = MaxReal;                 //! initialise feed
            nc.X.v = MaxReal;                     //! initialise X
            nc.Y.v = MaxReal;                     //! initialise Y
            nc.Z.v = MaxReal;                     //! initialise Z
            
        }
        
        public override void OnStartProject(ICLDProject prj)
        {
            

            nc = new NCFile();
            nc.OutputFileName = Settings.Params.Str["OutFiles.NCFileName"];
            //nc.ProgName = Settings.Params.Str["OutFiles.NCProgName"];
            InputBox("Input the name of programs", ref nc.ProgName);
            if (String.IsNullOrEmpty(nc.ProgName))
                nc.ProgName = "";
            nc.Text.Show($"{nc.ProgName}");
            nc.WriteLine("%");
            nc.WriteLine("O" + nc.ProgName);
            
            nc.WriteLine();

            nc.WriteLine("( Postprocessor: " + SPPName + " )");
            nc.WriteLine("( Generated by SprutCAM )");
            nc.WriteLine("( DATE: " + CurDate() + " )");
            nc.WriteLine("( TIME: " + CurTime() + " )");

            OutToolList();

            nc.GInterp.v = 100;
            nc.Plane.v = 17;
            nc.KorEcv.v = 40;
            nc.KorDL.v = 49;
            nc.Cycle.v  = 80;
            nc.ABS_INC.v = 90;
            nc.COORDSYS.v = 54;
            nc.SmoothMv.v = 64;
            nc.CancelScale.v = 50;
            nc.Block.Out();

            string Flip = "N";
            InputBox("Flip 4th Axis Project Say Y\\N (Case Sensative): ", ref Flip);
            if(Flip.ToUpper() == "Y")
            {
                nc.Flip.v = 1;
            }
            nc.Block.Out();
        }


        public override void OnGoto(ICLDGotoCommand cmd, CLDArray cld)
        {
            nc.GInterp.v = 1;
            nc.X.v = cmd.EP.X;
            nc.Y.v = cmd.EP.Y;
            nc.Z.v = cmd.EP.Z;
            nc.Block.Out();
        }

        public override void OnPPFun(ICLDPPFunCommand cmd, CLDArray cld)
        {
            switch(cld[1])
            {
                case 58 :
                {
                    int unit = 0;
                    if(cld[20] == 0)
                    {
                        unit = 21;
                    }
                    else 
                    {
                        unit = 20;
                    }
                    if(unit == 21)
                    {
                        nc.Units.v = unit;
                        nc.Text.v = "(Metric)";
                        nc.TextBlock.Out();
                    }
                    else
                    {
                        nc.Units.v = unit;
                        nc.Text.v = "(Inch)";
                        nc.TextBlock.Out();
                    }
                    break;
                }
                default:
                    break;
            }
        }

        public override void OnLoadTool(ICLDLoadToolCommand cmd, CLDArray cld)
        {
            nc.Block.Out();
            if(CycleOn == 1)
            {
                CycleOn = 0;
                nc.Cycle.v = 80;
            }
            nc.GoTCP.v = 998;
            nc.Block.Out();
            var Tool_ = cld[1];
            var H_ = cld[1];
            int Mspdir = 0;
            if(nc.MSP.v != 5)
            {
                Mspdir = (int)nc.MSP.v;
                nc.MSP.v = 5;
                nc.Block.Out();
            }
            nc.Tool.v = Tool_;
            nc.H.v = H_;
            nc.KorDL.v = 43;
            nc.Msm.v = 6;
            nc.Block.Out();
            if(Mspdir != 0)
            {
                nc.MSP.v = Mspdir;
            }
            nc.Block.Out();
            Initialise();
        }
        public override void OnFinishProject(ICLDProject prj)
        {

            nc.Write("%");
        }

        public override void OnStartTechOperation(ICLDTechOperation op, ICLDPPFunCommand cmd, CLDArray cld)
        {
            nc.WriteLine("(" + op.Comment + ")");
        }

        public override void OnFinishTechOperation(ICLDTechOperation op, ICLDPPFunCommand cmd, CLDArray cld)
        {
            nc.WriteLine();
        }

        public override void StopOnCLData() 
        {
            // Do nothing, just to be possible to use CLData breakpoints
        }

        // Uncomment line below (Ctrl + "/"), go to the end of "On" word and press Ctrl+Space to add a new CLData command handler
        // override On

    }
}
