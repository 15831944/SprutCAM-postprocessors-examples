namespace SprutTechnology.SCPostprocessor
{

    public partial class NCFile: TTextNCFile
    {
        public string ProgName;
        // Declare variables specific to a particular file here, as shown below
        // int FileNumber;
    }

    

    public partial class Postprocessor: TPostprocessor
    {
        #region Common variables definition
        // Declare here global variables that apply to the entire postprocessor.

        ///<summary>Current nc-file</summary>
        NCFile nc;

        #endregion

        const string SPPName = "MACH3_DN";

        public void OutToolList()
        {
            SortedList<int,string> list = new SortedList<int, string>();
            for(int i = 0; i < CLDProject.Operations.Count; i++)
            {
                var op = CLDProject.Operations[i];
                if((op.Tool != null) && (op.Tool.Command != null))
                {
                    list.TryAdd(op.Tool.Number, op.Tool.Caption);
                }
            }
            foreach(var tl in list)
            {
                nc.Output(tl.Key + " " + tl.Value);
            }
        }

            
        
        public override void OnStartProject(ICLDProject prj)
        {
            

            nc = new NCFile();
            nc.OutputFileName = Settings.Params.Str["OutFiles.NCFileName"];
            //nc.ProgName = Settings.Params.Str["OutFiles.NCProgName"];
            InputBox("Input the name of programs", ref nc.ProgName);
            if (String.IsNullOrEmpty(nc.ProgName))
                nc.ProgName = "";
            nc.Text.Show($"{nc.ProgName}");
            nc.WriteLine("%");
            nc.WriteLine("O" + nc.ProgName);
            
            nc.WriteLine();

            nc.WriteLine("( Postprocessor: " + SPPName + " )");
            nc.WriteLine("( Generated by SprutCAM )");
            nc.WriteLine("( DATE: " + CurDate() + " )");
            nc.WriteLine("( TIME: " + CurTime() + " )");

            OutToolList();
         //   nc.WriteLine("Start of file: " + Path.GetFileName(nc.OutputFileName));

            //foreach(auto n in )
        }

        public override void OnGoto(ICLDGotoCommand cmd, CLDArray cld)
        {
            nc.GInterp.v = 1;
            nc.X.v = cmd.EP.X;
            nc.Y.v = cmd.EP.Y;
            nc.Z.v = cmd.EP.Z;
            nc.Block.Out();
        }

        public override void OnFinishProject(ICLDProject prj)
        {

            nc.Write("%");
        }

        public override void OnStartTechOperation(ICLDTechOperation op, ICLDPPFunCommand cmd, CLDArray cld)
        {
            nc.WriteLine("(" + op.Comment + ")");
        }

        public override void OnFinishTechOperation(ICLDTechOperation op, ICLDPPFunCommand cmd, CLDArray cld)
        {
            nc.WriteLine();
        }

        public override void StopOnCLData() 
        {
            // Do nothing, just to be possible to use CLData breakpoints
        }

        // Uncomment line below (Ctrl + "/"), go to the end of "On" word and press Ctrl+Space to add a new CLData command handler
        // override On

    }
}
